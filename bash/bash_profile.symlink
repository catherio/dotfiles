##### CANNED CONFIGS #####

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# pretty boring prompt:
PS1='\u@\h:\w$ '

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

##### PERSONAL CONFIGS #####
platform='linux'  # this is a really really minimal way of detecting OS
unamestr=$(uname)
if [[ "$unamestr" == 'Darwin' ]]; then
   platform='osx'
fi

# Run google-specific setup
if [ -f ~/brain/bash_setup.sh ]; then
   source ~/brain/bash_setup.sh
fi

# brew told me to put this here
if [[ $platform == 'osx' ]]; then
    if [ -f $(brew --prefix)/etc/bash_completion ]; then
        . $(brew --prefix)/etc/bash_completion
    fi
fi

# come on let's get these colors right
if [[ $platform == 'osx' ]]; then
   export CLICOLOR=1
   export LSCOLORS=ExFxBxDxCxegedabagacad
   export LS_COLORS=ExFxBxDxCxegedabagacad
   alias ls='ls -GFh'
else
    if [ -x /usr/bin/dircolors ]; then
        test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
	    alias ls='ls --color=auto'
    fi
fi

alias grep='grep --color=auto'


# nicolashery's mac-dev-setup suggested that I get the system python, so ok:
PATH=/usr/local/share/python:$PATH
export PATH

# virtualenvwrapper
# if [[ $platform == 'osx' ]]; then
#    export WORKON_HOME=~/venvs
#    source /usr/local/bin/virtualenvwrapper.sh
# fi


# where's tensorflow? python3 edition
# use the "virtualenv" section of the install guide at https://www.tensorflow.org/versions/r0.11/get_started/os_setup.html
# Mac OS X, CPU only, Python 3.4 or 3.5:
export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.11.0-py3-none-any.whl

# sometimes I want to strip protocol and port
# ippart tcp://192.168.99.100:2376 -> 192.168.99.100
alias ippart="sed 's/^[^0-9]*\([a-z0-9\.]*\):[0-9]*$/\1/' <<<"

# added by Anaconda3 4.2.0 installer
export PATH="/Users/catherio/anaconda3/bin:$PATH"

# Use python3 anaconda virtualenv called 'ai3'
# or the one with tensorflow 1.0 called 'tf1'
source activate tf1

# directories I browse to a lot
alias dots='cd ~/.dotfiles'

# git shortcuts for great victory
alias g='git'
alias gl='git log'; alias glog='git log'; alias gitl='git log'
alias gb='git branch'; alias gbr='git branch'; alias gitb='git branch';
alias gc='git commit'; alias gitc='git commit'
alias gcm='git commit -m'; alias gitcm='git commit -m'
alias gcam='git commit -am'; alias gitcam='git commit -am'
alias gco='git checkout'; alias gitco='git checkout'
alias gs='git status'; alias gst='git status'; alias gits='git status'
alias ga='git add'; alias gadd='git add'; alias gita='git add'
alias gd='git diff'; alias gdiff='git diff'; alias gitd='git diff'
alias gdc='git diff --cached'; alias 'gitdc'='git diff --cached'
alias gr='git rebase'; alias gitr='git rebase'
alias gri='git rebase --interactive'; alias gitri='git rebase --interactive'
alias gra='git rebase --abort'; alias gitra='git rebase --abort'
alias gpr='git pull --rebase'; alias gitpr='git pull --rebase'
alias gf='git fetch'; alias gitf='git fetch'; alias gfetch='git fetch'
alias gp='git push'; alias gpush='git push'; alias gitp='git push'
alias gma='git merge --abort'; alias gitma='git merge --abort'
alias gm='git merge'; alias gitm='git merge'; alias gmerge='git merge'
alias gsh='git stash'; alias gitsh='git stash'; alias gstash='git stash'
alias grm='git rm'; alias gitrm='git rm';
alias greset='git reset'; alias gres='git reset'; alias gitres='git reset';
alias grt='git reset'; alias gitrt='git reset';
alias gpu='git push --set-upstream origin $(git name-rev HEAD --name-only)'

if [[ $platform == 'osx' ]]; then
    alias sb='source ~/.bash_profile'
else
	alias sb='source ~/.bashrc'
fi
alias tf1='source activate tf1'
alias ai3='source activate ai3'
alias ipy='ipython'
alias tma='tmux attach'
alias jn='jupyter notebook'

# no idea if this is helpful
java()
{
    env DYLD_LIBRARY_PATH= java "$@"
}

# go path things
export GOPATH='/Users/catherio/go'
export PATH=$PATH:$GOPATH/bin

# pychecker
export PATH=$PATH:/Users/catherio/.dotfiles/python

# CPAN wanted these when installing tagtime
PATH="/Users/catherio/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/Users/catherio/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/Users/catherio/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/Users/catherio/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/Users/catherio/perl5"; export PERL_MM_OPT;

# Making a new python file from template is useful
alias mkpy='cp -n -v ~/openai/templ.py $1'

# Finding stuff
fname () { find . -name *$1*; }

# Sharing bash history
export HISTCONTROL=ignoredups:erasedups
# When the shell exits, append to the history file instead of overwriting it
shopt -s histappend
# After each command, append to the history file and reread it
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"

# OSX has emacs 22 by default and I want emacs 25
if [[ $platform == 'osx' ]]; then
   alias emacs22='/usr/bin/emacs'
   alias emacs='~/.brew/Cellar/emacs/25.3/bin/emacs'
fi


# Using emacsclient more often would be great
export ALTERNATE_EDITOR=emacs EDITOR=emacsclient VISUAL=emacsclient
alias ec='emacsclient'
alias emc='emacsclient'
alias emacsc='emacsclient'

# stupid hackathon
# source ~/Dropbox/Projects/apparel/keys.sh

# don't be docified
if hash docify 2>/dev/null; then
    docify local
fi

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/usr/local/share/google-cloud-sdk/path.bash.inc' ]; then source '/usr/local/share/google-cloud-sdk/path.bash.inc'; fi
# The next line enables shell command completion for gcloud.
if [ -f '/usr/local/share/google-cloud-sdk/completion.bash.inc' ]; then source '/usr/local/share/google-cloud-sdk/completion.bash.inc'; fi

# Of course there's an alias I want
alias gc='gcloud compute'

# From Tom! Thanks Tom
gclog () { gcloud compute instances get-serial-port-output ${@}; }
gctail () { gcloud compute instances tail-serial-port-output ${@}; }
gcssh () {
  ip=`gcloud compute instances list ${@} --format 'csv(networkInterfaces[0].accessConfigs[0].natIP:label=EXTERNAL_IP)' | tail -1`
    ssh tom@35.185.216.109 -i $HOME/.ssh/prior_gce
	}
gclist () { gcloud compute instances list --format 'table(name,machine_type,status)'; }
gclistv () { gcloud compute instances list; } # Verbose mode, with more entries

gcdel () { gcloud compute instances delete ${@}; }

gclast () {
  # Return the name of the last instance
    gclist | tail -1 | cut -f 1 -d ' '
}

SYNC_DIR="/Users/catherio/ml"
gcsync() {
  ip=`gcloud compute instances list ${@} --format 'csv(networkInterfaces[0].accessConfigs[0].natIP:label=EXTERNAL_IP)' | tail -1`
  rsync -rv --exclude '*/data/*' $SYNC_DIR/ catherio@${ip}:/home/catherio/ml -e "ssh -i $HOME/.ssh/google_compute_engine"
}

gcsyncdata() {
  ip=`gcloud compute instances list ${@} --format 'csv(networkInterfaces[0].accessConfigs[0].natIP:label=EXTERNAL_IP)' | tail -1`
  rsync -rv $SYNC_DIR/ catherio@${ip}:/home/catherio/ml -e "ssh -i $HOME/.ssh/google_compute_engine"
}

gcsnap () {
  # Save a snapshot of your instance
  snap_name=${1:-"ml-tmp-`date +%s`"}
  description=${2:-""}
  instance_name=`gclast`
  gcloud compute --project "iconic-setup-168819" disks snapshot ${instance_name} --zone "us-west1-b" --description description --snapshot-names ${snap_name}
}
